Design Overview
===============
An initial `investigation <https://confluence.skatelescope.org/display/SE/Resource+management+-+ST-2017>`_ was done to propose a design for the namespace manager. The manager requires some components:

* Database: Keep historical records as Kubernetes (etcd) only keeps data on resources that actually exist
* CollectController/ActionController: Processes that decide what information to collect and what action to take
* Collectors: Processes that decide when collect information
* Actions: Process that act upon information
* API: Allow other systems to interact with the manager and its collected data (i.e, Kyverno, Kubernetes API)

The **collector** and **action** processes will be generated by a **CollectController** and an **ActionController** which are distributed processes themselves. Both the collectors and actors - as the controllers themselves - require the follwing:

* High availability
* Operational status reporting
* Auditing
* Decoupling from specific technologies
* Efficient and non-blocking

Given these constraints, we opted for the following design:

* Database: MongoDB (DocumentDB compatible) with an API abstracting it
* API: Python-based REST API
* Controllers: Python-based (Async) with leader-election to support high-availability
* Collectors: Jobs or CronJobs
* Actions: Jobs or CronJobs

.. image:: ../_static/images/namespace_manager.png
  :width: 600
  :alt: Namespace Manager Design
